
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  role: 'role',
  name: 'name',
  email: 'email',
  password: 'password',
  phoneNumber: 'phoneNumber',
  photoUrl: 'photoUrl',
  isVerified: 'isVerified',
  selectProvider: 'selectProvider',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordTokenExpiresAt: 'resetPasswordTokenExpiresAt',
  verifyToken: 'verifyToken',
  verifyTokenExpiresAt: 'verifyTokenExpiresAt',
  pendingEmail: 'pendingEmail',
  pendingEmailToken: 'pendingEmailToken',
  pendingEmailTokenExpiresAt: 'pendingEmailTokenExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.CustomerAddressScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  label: 'label',
  address: 'address',
  city: 'city',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude',
  notes: 'notes',
  isPrimary: 'isPrimary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  shiftId: 'shiftId',
  role: 'role',
  name: 'name',
  email: 'email',
  password: 'password',
  phoneNumber: 'phoneNumber',
  address: 'address',
  photoUrl: 'photoUrl',
  isActive: 'isActive',
  resetPasswordToken: 'resetPasswordToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ShiftScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.WorkStationScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  station: 'station',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.EmployeeTaskScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  orderHeaderId: 'orderHeaderId',
  orderItemId: 'orderItemId',
  outletId: 'outletId',
  shiftId: 'shiftId',
  workStationId: 'workStationId',
  status: 'status',
  itemQty: 'itemQty',
  itemUnit: 'itemUnit',
  bypassReqNote: 'bypassReqNote',
  bypassReq: 'bypassReq',
  isReqAprooved: 'isReqAprooved',
  itemPassedNote: 'itemPassedNote',
  assignedById: 'assignedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PickUpTaskScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  outletId: 'outletId',
  customerAddressId: 'customerAddressId',
  assignedByAdminId: 'assignedByAdminId',
  orderHeaderId: 'orderHeaderId',
  status: 'status',
  distance: 'distance',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DeliveryTaskScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  outletId: 'outletId',
  customerAddressId: 'customerAddressId',
  assignedByAdminId: 'assignedByAdminId',
  orderHeaderId: 'orderHeaderId',
  status: 'status',
  distance: 'distance',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AttendanceScalarFieldEnum = {
  id: 'id',
  employeeId: 'employeeId',
  shiftId: 'shiftId',
  outletId: 'outletId',
  date: 'date',
  status: 'status',
  clockInAt: 'clockInAt',
  clockOutAt: 'clockOutAt',
  workMinutes: 'workMinutes',
  lateMinutes: 'lateMinutes',
  earlyLeaveMin: 'earlyLeaveMin',
  notes: 'notes',
  approvedById: 'approvedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OutletScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  phoneNumber: 'phoneNumber',
  city: 'city',
  postalCode: 'postalCode',
  latitude: 'latitude',
  longitude: 'longitude',
  coverageArea: 'coverageArea',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OutletScheduleScalarFieldEnum = {
  id: 'id',
  outletId: 'outletId',
  detailDays: 'detailDays',
  openHour: 'openHour',
  closeHour: 'closeHour',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ServiceCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  serviceCategoryId: 'serviceCategoryId',
  name: 'name',
  unit: 'unit',
  basePrice: 'basePrice',
  minQty: 'minQty',
  etaHours: 'etaHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OrderHeaderScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  handledById: 'handledById',
  outletId: 'outletId',
  status: 'status',
  notes: 'notes',
  pickupAt: 'pickupAt',
  deliverAt: 'deliverAt',
  estHours: 'estHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderHeaderId: 'orderHeaderId',
  serviceId: 'serviceId',
  qty: 'qty',
  unitPrice: 'unitPrice',
  subTotal: 'subTotal',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  orderHeaderId: 'orderHeaderId',
  method: 'method',
  amount: 'amount',
  status: 'status',
  providerRef: 'providerRef',
  paidAt: 'paidAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  CUSTOMER: 'CUSTOMER',
  SUPER_ADMIN: 'SUPER_ADMIN',
  OUTLET_ADMIN: 'OUTLET_ADMIN',
  DRIVER: 'DRIVER',
  WORKER: 'WORKER'
};

exports.OAuthProvider = exports.$Enums.OAuthProvider = {
  GOOGLE: 'GOOGLE',
  FACEBOOK: 'FACEBOOK',
  TWITTER: 'TWITTER',
  APPLE: 'APPLE',
  GITHUB: 'GITHUB',
  OTHER: 'OTHER'
};

exports.Label = exports.$Enums.Label = {
  HOME: 'HOME',
  OFFICE: 'OFFICE',
  APARTMENT: 'APARTMENT',
  OTHER: 'OTHER'
};

exports.Station = exports.$Enums.Station = {
  WASHING: 'WASHING',
  IRONING: 'IRONING',
  PACKING: 'PACKING',
  QA: 'QA',
  ADMIN: 'ADMIN'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  PENDING: 'PENDING',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  ON_HOLD: 'ON_HOLD',
  DONE: 'DONE',
  CANCELLED: 'CANCELLED',
  REJECTED: 'REJECTED',
  REQUEST_BYPASS: 'REQUEST_BYPASS'
};

exports.PickupStatus = exports.$Enums.PickupStatus = {
  WAITING_FOR_DRIVER: 'WAITING_FOR_DRIVER',
  ON_THE_WAY_TO_CUSTOMER: 'ON_THE_WAY_TO_CUSTOMER',
  ON_THE_WAY_TO_OUTLET: 'ON_THE_WAY_TO_OUTLET',
  RECEIVED_BY_OUTLET: 'RECEIVED_BY_OUTLET'
};

exports.DeilveryStatus = exports.$Enums.DeilveryStatus = {
  NOT_READY_TO_DELIVER: 'NOT_READY_TO_DELIVER',
  WAITING_FOR_DRIVER: 'WAITING_FOR_DRIVER',
  ON_THE_WAY_TO_OUTLET: 'ON_THE_WAY_TO_OUTLET',
  ON_THE_WAY_TO_CUSTOMER: 'ON_THE_WAY_TO_CUSTOMER',
  RECEIVED_BY_CUSTOMER: 'RECEIVED_BY_CUSTOMER'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EARLY_LEAVE: 'EARLY_LEAVE',
  ON_LEAVE: 'ON_LEAVE',
  SICK: 'SICK',
  HOLIDAY: 'HOLIDAY'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  WAITING_FOR_CONFIRMATION: 'WAITING_FOR_CONFIRMATION',
  WAITING_FOR_DRIVER_PICKUP: 'WAITING_FOR_DRIVER_PICKUP',
  ON_THE_WAY_TO_OUTLET: 'ON_THE_WAY_TO_OUTLET',
  ARRIVED_AT_OUTLET: 'ARRIVED_AT_OUTLET',
  WASHING_IN_PROGRESS: 'WASHING_IN_PROGRESS',
  IRONING_IN_PROGRESS: 'IRONING_IN_PROGRESS',
  PACKING_IN_PROGRESS: 'PACKING_IN_PROGRESS',
  WAITING_FOR_PAYMENT: 'WAITING_FOR_PAYMENT',
  READY_FOR_DELIVERY: 'READY_FOR_DELIVERY',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED_TO_CUSTOMER: 'DELIVERED_TO_CUSTOMER'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  DEBIT: 'DEBIT',
  CREDIT: 'CREDIT',
  BANK_TRANSFER: 'BANK_TRANSFER',
  QRIS: 'QRIS',
  E_WALLET: 'E_WALLET'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  WAITING: 'WAITING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED'
};

exports.Prisma.ModelName = {
  Customer: 'Customer',
  CustomerAddress: 'CustomerAddress',
  Employee: 'Employee',
  Shift: 'Shift',
  WorkStation: 'WorkStation',
  EmployeeTask: 'EmployeeTask',
  PickUpTask: 'PickUpTask',
  DeliveryTask: 'DeliveryTask',
  Attendance: 'Attendance',
  Outlet: 'Outlet',
  OutletSchedule: 'OutletSchedule',
  ServiceCategory: 'ServiceCategory',
  Service: 'Service',
  OrderHeader: 'OrderHeader',
  OrderItem: 'OrderItem',
  Payment: 'Payment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
