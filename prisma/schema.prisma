generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ===================== ENUMS =====================
 */

enum Role {
  CUSTOMER     @map("customer")
  SUPER_ADMIN  @map("super_admin")
  OUTLET_ADMIN @map("outlet_admin")
  DRIVER       @map("driver")
  WORKER       @map("worker")

  @@map("employee_role")
}

enum AttendanceStatus {
  PRESENT     @map("present")
  ABSENT      @map("absent")
  LATE        @map("late")
  EARLY_LEAVE @map("early_leave")
  ON_LEAVE    @map("on_leave")
  SICK        @map("sick")
  HOLIDAY     @map("holiday")

  @@map("attendance_status")
}

enum OrderStatus {
  WAITING_FOR_CONFIRMATION  @map("waiting_for_confirmation")
  WAITING_FOR_DRIVER_PICKUP @map("waiting_for_driver_pickup")
  ON_THE_WAY_TO_OUTLET      @map("on_the_way_to_outlet")
  ARRIVED_AT_OUTLET         @map("arrived_at_outlet")
  WASHING_IN_PROGRESS       @map("washing_in_progress")
  IRONING_IN_PROGRESS       @map("ironing_in_progress")
  PACKING_IN_PROGRESS       @map("packing_in_progress")
  WAITING_FOR_PAYMENT       @map("waiting_for_payment")
  READY_FOR_DELIVERY        @map("ready_for_delivery")
  OUT_FOR_DELIVERY          @map("out_for_delivery")
  DELIVERED_TO_CUSTOMER     @map("delivered_to_customer")

  @@map("order_status")
}

enum PaymentMethod {
  CASH          @map("cash")
  DEBIT         @map("debit")
  CREDIT        @map("credit")
  BANK_TRANSFER @map("bank_transfer")
  QRIS          @map("qris")
  E_WALLET      @map("e_wallet")

  @@map("payment_method")
}

enum Station {
  WASHING @map("washing")
  IRONING @map("ironing")
  PACKING @map("packing")
  QA      @map("qa")
  ADMIN   @map("admin")

  @@map("station")
}

enum PaymentStatus {
  WAITING  @map("waiting")
  PAID     @map("paid")
  FAILED   @map("failed")
  EXPIRED  @map("expired")
  CANCELED @map("canceled")

  @@map("payment_status")
}

enum TaskStatus {
  PENDING        @map("pending")
  ASSIGNED       @map("assigned")
  IN_PROGRESS    @map("in_progress")
  ON_HOLD        @map("on_hold")
  DONE           @map("done")
  CANCELLED      @map("cancelled")
  REJECTED       @map("rejected")
  REQUEST_BYPASS @map("request_bypass")

  @@map("task_status")
}

enum Label {
  HOME
  OFFICE
  APARTMENT
  OTHER

  @@map("label")
}

enum OAuthProvider {
  GOOGLE   @map("google")
  FACEBOOK @map("facebook")
  TWITTER  @map("twitter")
  APPLE    @map("apple")
  GITHUB   @map("github")
  OTHER    @map("other")

  @@map("oauth_provider")
}

enum PickupStatus {
  WAITING_FOR_DRIVER
  ON_THE_WAY_TO_CUSTOMER
  ON_THE_WAY_TO_OUTLET
  RECEIVED_BY_OUTLET
}

enum DeilveryStatus {
  NOT_READY_TO_DELIVER
  WAITING_FOR_DRIVER
  ON_THE_WAY_TO_OUTLET
  ON_THE_WAY_TO_CUSTOMER
  RECEIVED_BY_CUSTOMER
}

/**
 * ===================== MODELS =====================
 */

model Customer {
  id                          String         @id @default(uuid())
  role                        Role           @default(CUSTOMER)
  name                        String?
  email                       String         @unique
  password                    String?
  phoneNumber                 String?        @map("phone_number")
  photoUrl                    String?        @map("photo_url")
  isVerified                  Boolean        @default(false) @map("is_verified")
  selectProvider                  OAuthProvider? @map("select_provider")
  resetPasswordToken          String?        @map("reset_password_token")
  resetPasswordTokenExpiresAt DateTime?      @map("reset_password_token_expires_at")
  verifyToken                 String?        @map("verify_token")
  verifyTokenExpiresAt        DateTime?      @map("verify_token_expires_at")
  pendingEmail                String?        @map("pending_email")
  pendingEmailToken           String?        @map("pending_email_token")
  pendingEmailTokenExpiresAt  DateTime?      @map("pending_email_token_expires_at")

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  customerAddress CustomerAddress[]
  orderHeader     OrderHeader[]

  @@map("customers")
}

model CustomerAddress {
  id         String  @id @default(uuid())
  customerId String  @map("customer_id")
  label      Label
  address    String
  city       String
  postalCode String  @map("postal_code")
  latitude   Float
  longitude  Float
  notes      String?
  isPrimary  Boolean @default(false) @map("is_primary")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  customers    Customer       @relation(fields: [customerId], references: [id])
  PickUpTask   PickUpTask[]
  DeliveryTask DeliveryTask[]

  @@map("customer_addresses")
}

model Employee {
  id                 String  @id @default(uuid())
  outletId           String  @map("outlet_id")
  shiftId            String  @map("shift_id")
  role               Role
  name               String
  email              String
  password           String?
  phoneNumber        String  @map("phone_number")
  address            String
  photoUrl           String? @map("photo_url")
  isActive           Boolean @default(false) @map("is_active")
  resetPasswordToken String? @map("reset_password_token")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  shifts              Shift          @relation(fields: [shiftId], references: [id])
  outlets             Outlet         @relation(fields: [outletId], references: [id])
  Attendance          Attendance[]
  orderHeader         OrderHeader[]
  WorkStation         WorkStation[]
  workerTasks         EmployeeTask[] @relation("WorkerTaskEmployee") // pasangan dari EmployeeTask.employee
  assignedTasks       EmployeeTask[] @relation("WorkerTaskAssignedBy")
  approvedAttendances Attendance[]   @relation("Approver") // back-relation approver
  pickUpDriver        PickUpTask[]   @relation("PickUpDriver")
  pickupAssignedBy    PickUpTask[]   @relation("PickUpAdmin")
  deliveryDriver      DeliveryTask[] @relation("DeliveryDriver")
  deliveryAssignedBy  DeliveryTask[] @relation("DeliveryAdmin")

  @@map("employees")
}

model Shift {
  id        String   @id @default(uuid())
  name      String
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")

  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  deletedAt   DateTime?      @map("deleted_at")
  Employee    Employee[]
  Attendance  Attendance[]
  workerTasks EmployeeTask[]

  @@map("shifts")
}

model WorkStation {
  id         String    @id @default(uuid())
  employeeId String    @map("employee_id")
  station    Station
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  employees   Employee       @relation(fields: [employeeId], references: [id])
  workerTasks EmployeeTask[]

  @@map("work_stations")
}

model EmployeeTask {
  id             String     @id @default(uuid())
  employeeId     String     @map("employee_id")
  orderHeaderId  String     @map("order_header_id")
  orderItemId    String     @map("order_item_id")
  outletId       String     @map("outlet_id")
  shiftId        String     @map("shift_id")
  workStationId  String     @map("work_station_id")
  status         TaskStatus @default(PENDING)
  itemQty        Int?
  itemUnit       String?
  bypassReqNote  String?
  bypassReq      Boolean?   @default(false)
  isReqAprooved  Boolean?   @default(false) @map("is_req_aprooved")
  itemPassedNote String?    @map("item_passed")

  assignedById String? @map("assigned_by_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  employee    Employee     @relation("WorkerTaskEmployee", fields: [employeeId], references: [id])
  assignedBy  Employee?    @relation("WorkerTaskAssignedBy", fields: [assignedById], references: [id])
  orderHeader OrderHeader? @relation(fields: [orderHeaderId], references: [id])
  orderItem   OrderItem?   @relation(fields: [orderItemId], references: [id])
  outlet      Outlet       @relation(fields: [outletId], references: [id])
  shift       Shift        @relation(fields: [shiftId], references: [id])
  workStation WorkStation  @relation(fields: [workStationId], references: [id])

  @@map("worker_tasks")
}

model PickUpTask {
  id                String       @id @default(uuid())
  driverId          String       @map("driver_id")
  outletId          String       @map("outlet_id")
  customerAddressId String       @map("customer_address_id")
  assignedByAdminId String       @map("assigned_by_admin_id")
  orderHeaderId     String       @map("order_header_id")
  status            PickupStatus @default(WAITING_FOR_DRIVER)
  distance          Int
  price             Int

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  driver          Employee        @relation("PickUpDriver", fields: [driverId], references: [id])
  assignedBy      Employee?       @relation("PickUpAdmin", fields: [assignedByAdminId], references: [id])
  outlets         Outlet          @relation(fields: [outletId], references: [id])
  customerAddress CustomerAddress @relation(fields: [customerAddressId], references: [id])
  orderHeader     OrderHeader     @relation(fields: [orderHeaderId], references: [id])

  @@map("pickup_tasks")
}

model DeliveryTask {
  id                String         @id @default(uuid())
  driverId          String         @map("driver_id")
  outletId          String         @map("outlet_id")
  customerAddressId String         @map("customer_address_id")
  assignedByAdminId String         @map("assigned_by_admin_id")
  orderHeaderId     String         @map("order_header_id")
  status            DeilveryStatus
  distance          Int
  price             Int

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  driver          Employee        @relation("DeliveryDriver", fields: [driverId], references: [id])
  assignedBy      Employee?       @relation("DeliveryAdmin", fields: [assignedByAdminId], references: [id])
  outlets         Outlet          @relation(fields: [outletId], references: [id])
  customerAddress CustomerAddress @relation(fields: [customerAddressId], references: [id])
  orderHeader     OrderHeader     @relation(fields: [orderHeaderId], references: [id])

  @@map("delivery_tasks")
}

model Attendance {
  id            String           @id @default(uuid())
  employeeId    String           @map("employee_id")
  shiftId       String           @map("shift_id")
  outletId      String           @map("outlet_id")
  date          DateTime
  status        AttendanceStatus
  clockInAt     DateTime?        @map("clock_in_at")
  clockOutAt    DateTime?        @map("clock_out_at")
  workMinutes   Int?             @map("work_minutes")
  lateMinutes   Int?             @map("late_minutes")
  earlyLeaveMin Int?             @map("early_leave_min")
  notes         String?
  approvedById  String?          @map("approved_by_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  employees  Employee  @relation(fields: [employeeId], references: [id])
  outlet     Outlet    @relation(fields: [outletId], references: [id])
  approvedBy Employee? @relation("Approver", fields: [approvedById], references: [id])
  shift      Shift     @relation(fields: [shiftId], references: [id])

  @@map("attendances")
}

model Outlet {
  id           String  @id @default(uuid())
  name         String
  address      String
  phoneNumber  String  @map("phone_number")
  city         String
  postalCode   String  @map("postal_code")
  latitude     Float
  longitude    Float
  coverageArea Int     @map("coverage_area")
  isActive     Boolean @default(false) @map("is_active")

  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")
  Employee       Employee[]
  Attendance     Attendance[]
  OutletSchedule OutletSchedule[]
  orderHeader    OrderHeader[]
  workerTasks    EmployeeTask[]
  PickUpTask     PickUpTask[]
  DeliveryTask   DeliveryTask[]

  @@map("outlets")
}

model OutletSchedule {
  id         String    @id @default(uuid())
  outletId   String    @map("outlet_id")
  detailDays String    @map("detail_days")
  openHour   DateTime  @map("open_hour")
  closeHour  DateTime  @map("close_hour")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  outlet Outlet @relation(fields: [outletId], references: [id])

  @@map("outlet_schedules")
}

model ServiceCategory {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  Service   Service[]

  @@map("service_categories")
}

model Service {
  id                String @id @default(uuid())
  serviceCategoryId String @map("service_category_id")
  name              String
  unit              String
  basePrice         Int    @map("base_price")
  minQty            Int    @map("min_qty")
  etaHours          Int    @map("eta_hours")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  serviceCatId ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  OrderItem    OrderItem[]

  @@map("services")
}

model OrderHeader {
  id          String      @id @default(uuid())
  customerId  String      @map("customer_id")
  handledById String?     @map("handled_by_id")
  outletId    String      @map("outlet_id")
  status      OrderStatus @default(WAITING_FOR_CONFIRMATION)
  notes       String
  pickupAt    DateTime    @map("pickup_at")
  deliverAt   DateTime    @map("deliver_at")
  estHours    Int         @map("est_hours")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")

  customers Customer  @relation(fields: [customerId], references: [id])
  employees Employee? @relation(fields: [handledById], references: [id])
  outlets   Outlet    @relation(fields: [outletId], references: [id])

  OrderItem    OrderItem[]
  Payment      Payment[]
  workerTasks  EmployeeTask[]
  PickUpTask   PickUpTask[]
  DeliveryTask DeliveryTask[]

  @@map("order_headers")
}

model OrderItem {
  id            String    @id @default(uuid())
  orderHeaderId String    @map("order_header_id")
  serviceId     String    @map("service_id")
  qty           Int
  unitPrice     Int       @map("unit_price")
  subTotal      Int       @map("sub_total")
  note          String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  orderheader OrderHeader    @relation(fields: [orderHeaderId], references: [id])
  service     Service        @relation(fields: [serviceId], references: [id])
  workerTasks EmployeeTask[]

  @@map("order_items")
}

model Payment {
  id            String        @id @default(uuid())
  orderHeaderId String        @map("order_header_id")
  method        PaymentMethod
  amount        Int
  status        PaymentStatus @default(WAITING)
  providerRef   String        @map("provider_ref")
  paidAt        DateTime      @map("paid_at")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")

  orderheader OrderHeader @relation(fields: [orderHeaderId], references: [id])

  @@map("payments")
}
