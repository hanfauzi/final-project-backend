generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum EmployeeRole {
  SUPER_ADMIN  @map("super_admin")
  OUTLET_ADMIN @map("outlet_admin")
  DRIVER       @map("driver")
  WORKER       @map("worker")

  @@map("employee_role")
}

enum AttendanceStatus {
  PRESENT     @map("present") // Hadir
  ABSENT      @map("absent") // Tidak hadir
  LATE        @map("late") // Hadir tapi terlambat
  EARLY_LEAVE @map("early_leave") // Pulang lebih awal
  ON_LEAVE    @map("on_leave") // Cuti
  SICK        @map("sick") // Izin sakit
  HOLIDAY     @map("holiday") // Libur resmi

  @@map("attendance_status")
}

enum LeaveType {
  SICK        @map("sick") // Sakit
  ANNUAL      @map("annual") // Cuti tahunan
  MATERNITY   @map("maternity") // Cuti melahirkan
  PATERNITY   @map("paternity") // Cuti ayah
  MARRIAGE    @map("marriage") // Izin menikah
  BEREAVEMENT @map("bereavement") // Izin duka cita (meninggal keluarga)
  UNPAID      @map("unpaid") // Cuti tanpa bayaran
  OTHER       @map("other") // Lain-lain

  @@map("leave_type")
}

enum LeaveReqStat {
  PENDING  @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")

  @@map("leave_req_status")
}

enum OrderStatus {
  WAITING_FOR_DRIVER_PICKUP @map("waiting_for_driver_pickup") // Menunggu Penjemputan Driver
  ON_THE_WAY_TO_OUTLET      @map("on_the_way_to_outlet") // Laundry Sedang Menuju Outlet
  ARRIVED_AT_OUTLET         @map("arrived_at_outlet") // Laundry Telah Sampai Outlet
  WASHING_IN_PROGRESS       @map("washing_in_progress") // Laundry Sedang Dicuci
  IRONING_IN_PROGRESS       @map("ironing_in_progress") // Laundry Sedang Disetrika
  PACKING_IN_PROGRESS       @map("packing_in_progress") // Laundry Sedang Di Packing
  WAITING_FOR_PAYMENT       @map("waiting_for_payment") // Menunggu Pembayaran
  READY_FOR_DELIVERY        @map("ready_for_delivery") // Laundry Siap Diantar
  OUT_FOR_DELIVERY          @map("out_for_delivery") // Laundry Sedang Dikirim Menuju Customer
  DELIVERED_TO_CUSTOMER     @map("delivered_to_customer") // Laundry Telah Diterima Customer

  @@map("order_status")
}

enum PaymentMethod {
  CASH          @map("cash") // Bayar tunai
  DEBIT         @map("debit") // Kartu debit
  CREDIT        @map("credit") // Kartu kredit
  BANK_TRANSFER @map("bank_transfer") // Transfer bank
  QRIS          @map("qris") // QRIS (QR code Indonesian standard)
  E_WALLET      @map("e_wallet") // Dompet digital (GoPay, OVO, Dana, dll)

  @@map("payment_method")
}

enum Station {
  WASHING          @map("washing")
  IRONING          @map("ironing")
  PACKING          @map("packing")
  DRIVING_PICKUP   @map("driving_pickup")
  DRIVING_DELIVERY @map("driving_delivery")
  QA               @map("qa")
  ADMIN            @map("admin")

  @@map("station")
}

enum TaskStatus {
  PENDING        @map("pending") // Task baru, belum dikerjakan
  ASSIGNED       @map("assigned") // Sudah ditugaskan ke karyawan
  IN_PROGRESS    @map("in_progress") // Sedang dikerjakan
  ON_HOLD        @map("on_hold") // Ditunda sementara
  DONE           @map("done") // Selesai
  CANCELLED      @map("cancelled") // Dibatalkan
  REJECTED       @map("rejected") // Ditolak (misalnya QA gagal)
  REQUEST_BYPASS @map("request_bypass") // Task dilewati (manual bypass)

  @@map("task_status")
}

enum Label {
  HOME
  OFFICE
  APARTMENT
  OTHER
}

model Customer {
  id                 String    @id @default(uuid()) @map("id")
  role               String    @default("CUSTOMER") @map("role")
  name               String?   @map("name")
  email              String    @unique @map("email")
  password           String    @map("password")
  phoneNumber        String?   @map("phone_number")
  isVerified         Boolean   @default(false) @map("is_verified")
  resetPasswordToken String?   @map("reset_password_token")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")

  addresses CustomerAddress[]
  orders    OrderHeader[]

  @@map("customers")
}

model CustomerAddress {
  id         String    @id @default(uuid()) @map("id")
  customerId String    @map("customer_id")
  label      Label     @default(HOME) @map("label")
  address    String    @map("address")
  city       String    @map("city")
  postalCode String    @map("postal_code")
  latitude   Float     @map("latitude")
  longitude  Float     @map("longitude")
  notes      String?   @map("notes")
  isPrimary  Boolean   @default(false) @map("is_primary")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@map("customer_addresses")
}

model ServiceCategory {
  id        String    @id @default(uuid()) @map("id")
  name      String    @unique @map("name")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  services Service[]

  @@map("service_categories")
}

model Service {
  id                String    @id @default(uuid()) @map("id")
  name              String    @map("name")
  serviceCategoryId String    @map("service_category_id")
  unit              String    @map("unit")
  basePrice         Int       @map("base_price")
  minQty            Float     @map("min_qty")
  estHours          Int       @map("est_hours")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  category   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  orderItems OrderItem[]

  @@index([serviceCategoryId])
  @@map("services")
}

model Outlet {
  id           String    @id @default(uuid()) @map("id")
  name         String    @map("name")
  address      String    @map("address")
  phoneNumber  String    @map("phone_number")
  city         String    @map("city")
  postalCode   String    @map("postal_code")
  latitude     Float     @map("latitude")
  longitude    Float     @map("longitude")
  coverageArea String?   @map("coverage_area")
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  schedules   OutletSchedule[]
  employees   Employee[]
  orders      OrderHeader[]
  attendances Attendance[]
  leaves      LeaveRequest[]
  tasks       EmployeeTask[]

  @@map("outlets")
}

model OutletSchedule {
  id         String    @id @default(uuid()) @map("id")
  outletId   String    @map("outlet_id")
  detailDays String    @map("detail_days")
  openHour   DateTime  @map("open_hour") @db.Timestamp()
  closeHour  DateTime  @map("close_hour") @db.Timestamp()
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  outlet Outlet @relation(fields: [outletId], references: [id], onDelete: Cascade)

  @@index([outletId])
  @@map("outlet_schedules")
}

model Employee {
  id                 String       @id @default(uuid()) @map("id")
  outletId           String       @map("outlet_id")
  shiftId            String       @map("shift_id")
  role               EmployeeRole @map("role")
  name               String       @map("name")
  email              String       @unique @map("email")
  password           String       @map("password")
  phoneNumber        String       @map("phone_number")
  address            String       @map("address")
  isActive           Boolean      @default(false) @map("is_active")
  resetPasswordToken String?      @map("reset_password_token")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")
  deletedAt          DateTime?    @map("deleted_at")

  outlet Outlet @relation(fields: [outletId], references: [id])
  shift  Shift  @relation(fields: [shiftId], references: [id])

  attendances         Attendance[]
  leaves              LeaveRequest[] @relation("EmployeeLeaves")
  leavesApproved      LeaveRequest[] @relation("LeaveApprover")
  workerTasks         EmployeeTask[] @relation("TaskAssignee")
  workerTasksAssigned EmployeeTask[] @relation("TaskAssigner")
  ordersHandled       OrderHeader[]  @relation("OrderHandledBy")
  approvedBy          Attendance[]   @relation("Approver")

  @@index([outletId])
  @@index([shiftId])
  @@map("employees")
}

model Shift {
  id        String    @id @default(uuid()) @map("id")
  name      String    @unique @map("name")
  startTime DateTime  @map("start_time") @db.Timestamp()
  endTime   DateTime  @map("end_time") @db.Timestamp()
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  employees   Employee[]
  attendances Attendance[]

  @@map("shifts")
}

model Attendance {
  id            String           @id @default(uuid()) @map("id")
  employeeId    String           @map("employee_id")
  shiftId       String           @map("shift_id")
  outletId      String           @map("outlet_id")
  date          DateTime         @map("date")
  status        AttendanceStatus @map("status")
  clockInAt     DateTime?        @map("clock_in_at") @db.Timestamp()
  clockOutAt    DateTime?        @map("clock_out_at") @db.Timestamp()
  workMinutes   Int?             @map("work_minutes")
  lateMinutes   Int?             @map("late_minutes")
  earlyLeaveMin Int?             @map("early_leave_min")
  notes         String?          @map("notes")
  approvedById  String?          @map("approved_by_id")
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")
  deletedAt     DateTime?        @map("deleted_at")

  employee   Employee  @relation(fields: [employeeId], references: [id])
  shift      Shift     @relation(fields: [shiftId], references: [id])
  outlet     Outlet    @relation(fields: [outletId], references: [id])
  approvedBy Employee? @relation("Approver", fields: [approvedById], references: [id])

  @@index([employeeId, date])
  @@index([outletId])
  @@index([shiftId])
  @@map("attendances")
}

model LeaveRequest {
  id           String       @id @default(uuid()) @map("id")
  employeeId   String       @map("employee_id")
  outletId     String       @map("outlet_id")
  type         LeaveType    @map("type")
  startDate    DateTime     @map("start_date")
  endDate      DateTime     @map("end_date")
  status       LeaveReqStat @default(PENDING) @map("status")
  approvedById String?      @map("approved_by_id")
  approvedAt   DateTime?    @map("approved_at")
  notes        String       @map("notes")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  deletedAt    DateTime?    @map("deleted_at")

  employee   Employee  @relation("EmployeeLeaves", fields: [employeeId], references: [id])
  outlet     Outlet    @relation(fields: [outletId], references: [id])
  approvedBy Employee? @relation("LeaveApprover", fields: [approvedById], references: [id])

  @@index([employeeId])
  @@index([outletId])
  @@index([approvedById])
  @@map("leave_requests")
}

model OrderHeader {
  id            String         @id @default(uuid()) @map("id")
  customerId    String         @map("customer_id")
  outletId      String         @map("outlet_id")
  handledById   String         @map("handled_by_id")
  status        OrderStatus    @map("status")
  notes         String         @map("notes")
  pickupAt      DateTime?      @map("pickup_at")
  deliveryAt    DateTime?      @map("delivery_at")
  paymentMethod PaymentMethod? @map("payment_method")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")

  customer  Customer  @relation(fields: [customerId], references: [id])
  outlet    Outlet    @relation(fields: [outletId], references: [id])
  handledBy Employee? @relation("OrderHandledBy", fields: [handledById], references: [id])

  items OrderItem[]
  tasks EmployeeTask[]

  @@index([customerId])
  @@index([outletId])
  @@index([handledById])
  @@map("order_headers")
}

model OrderItem {
  id        String    @id @default(uuid()) @map("id")
  orderId   String    @map("order_id")
  serviceId String    @map("service_id")
  qty       Float     @map("qty")
  note      String    @map("note")
  unitPrice Int       @map("unit_price")
  subTotal  Int       @map("sub_total")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  order   OrderHeader @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service Service     @relation(fields: [serviceId], references: [id])

  @@index([orderId])
  @@index([serviceId])
  @@map("order_items")
}

model WorkerStation {
  id        String    @id @default(uuid()) @map("id")
  station   Station   @map("station")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  tasks EmployeeTask[]

  @@map("worker_stations")
}

model EmployeeTask {
  id            String     @id @default(uuid()) @map("id")
  employeeId    String     @map("employee_id")
  assignedById  String?    @map("assigned_by_id")
  orderId       String?    @map("order_id")
  outletId      String     @map("outlet_id")
  workStationId String?    @map("work_station_id")
  type          Station    @map("type")
  status        TaskStatus @default(PENDING) @map("status")
  startAt       DateTime?  @map("start_at")
  finishedAt    DateTime?  @map("finished_at")
  qty           Float?     @map("qty")
  isApproved    Boolean?   @map("is_approved")
  notes         String?    @map("notes")
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  deletedAt     DateTime?  @map("deleted_at")

  assignee   Employee?      @relation("TaskAssignee", fields: [employeeId], references: [id])
  assignedBy Employee?      @relation("TaskAssigner", fields: [assignedById], references: [id])
  order      OrderHeader?   @relation(fields: [orderId], references: [id])
  outlet     Outlet         @relation(fields: [outletId], references: [id])
  station    WorkerStation? @relation(fields: [workStationId], references: [id])

  @@index([employeeId])
  @@index([assignedById])
  @@index([orderId])
  @@index([outletId])
  @@index([workStationId])
  @@map("employee_tasks")
}
